

from pygame.display import set_mode, update
from pygame.gfxdraw import pixel
from pygame import DOUBLEBUF
from pygame.event import set_allowed
from time import sleep, time
from numba import *
import numpy as np
from math import *
#from cytest import mathfr


width, height = 1900,1060
screen = set_mode((width, height),DOUBLEBUF)
screen.set_alpha(None)
set_allowed(None)
xaxis, yaxis = width // 2, height // 2
scale = 450
iterations = 512


@jit(fastmath=True)
def mathfr(ix,iy):
    z = np.csingle(0+0j)
    c = np.complex((ix - xaxis), (iy - yaxis))
    for i in range(iterations):
        z = np.multiply(z, z)+ np.divide(c, scale)
        #z = z * z + c/scale
        if (z.imag) > 2.0:
            return True




# @jit(fastmath=True)
# def mathfr(ix,iy):
#     z = np.complex(0+0j)
#     c = np.complex((ix - xaxis), (iy - yaxis))
#     for i in range(iterations):
#         z = np.multiply(z, z)+ np.divide(c, scale)
#         #z = z * z + c/scale
#         if z.real > 2.0:
#             return True


def fractal(screen):
    for iy in range(height):
        for ix in range(width):
            if (mathfr(ix,iy)):
                pixel(screen, ix, iy, (100,0,0))
        if not (iy%32):
            update(0,iy-32,width,iy)
start_Time = time()
fractal(screen)
print(time()-start_Time)

sleep(1)
exit(0)
